/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tools;

import java.awt.Color;
import java.awt.Graphics2D;
import java.util.ArrayList;

/**
 *
 * @author TICS03
 */
public class MapZtoW extends javax.swing.JFrame {
    TP02_Problem07d problemD = new TP02_Problem07d(100);
    /**
     * Creates new form MapZtoW
     */
    public MapZtoW() {
        initComponents();
        problemD.initZ();
        problemD.computeW();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDraw = new javax.swing.JButton();
        pnlDrawZ = new javax.swing.JPanel();
        pnlDrawW = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDraw.setText("Draw");
        btnDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrawActionPerformed(evt);
            }
        });
        getContentPane().add(btnDraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 90, -1));

        javax.swing.GroupLayout pnlDrawZLayout = new javax.swing.GroupLayout(pnlDrawZ);
        pnlDrawZ.setLayout(pnlDrawZLayout);
        pnlDrawZLayout.setHorizontalGroup(
            pnlDrawZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlDrawZLayout.setVerticalGroup(
            pnlDrawZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(pnlDrawZ, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 300, 300));

        javax.swing.GroupLayout pnlDrawWLayout = new javax.swing.GroupLayout(pnlDrawW);
        pnlDrawW.setLayout(pnlDrawWLayout);
        pnlDrawWLayout.setHorizontalGroup(
            pnlDrawWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlDrawWLayout.setVerticalGroup(
            pnlDrawWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(pnlDrawW, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 300, 300));

        setBounds(0, 0, 656, 488);
    }// </editor-fold>//GEN-END:initComponents

    
    private void drawZ() {
        Graphics2D g = (Graphics2D) pnlDrawZ.getGraphics();
        
        g.setColor(Color.white);
        
        ArrayList<ComplexNumber> z = problemD.getZ();
        for(ComplexNumber c:z) {
            g.drawString(".", 
                    Coordinate.toScreenX( c.getA() ), 
                    Coordinate.toScreenY( c.getB() )
            );
        }
    }
    
    private void drawW() {
        Graphics2D g = (Graphics2D) pnlDrawW.getGraphics();
        
        g.setColor(Color.white);
        
        ArrayList<ComplexNumber> w = problemD.getW();
        for(ComplexNumber c:w) {
            g.drawString(".", 
                    Coordinate.toScreenX( c.getA() ), 
                    Coordinate.toScreenY( c.getB() )
            );
        }
    }
    
    private void btnDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawActionPerformed
        // TODO add your handling code here:
        drawAxisZ();
        drawAxisW();
        
        drawZ();
        drawW();
    }//GEN-LAST:event_btnDrawActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapZtoW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapZtoW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapZtoW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapZtoW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapZtoW().setVisible(true);
            }
        });
    }
    
    private void drawAxisZ() {
        Graphics2D g = (Graphics2D) pnlDrawZ.getGraphics();
        
        // blackboard
        g.setColor(new Color(24, 62, 12));
        g.fillRect(0, 0, Coordinate.WIDTH, Coordinate.HEIGHT);
        
        // draw x axis (XMIN, 0) (XMAX, 0)
        g.setColor(Color.white);
        g.drawLine(
                Coordinate.toScreenX(Coordinate.XMIN),
                Coordinate.toScreenY(0), 
                Coordinate.toScreenX(Coordinate.XMAX),
                Coordinate.toScreenY(0)
        );
        
        // draw y axis (0, YMIN) (0, YMAX)
         g.drawLine(
                Coordinate.toScreenX(0),
                Coordinate.toScreenY(Coordinate.YMIN), 
                Coordinate.toScreenX(0),
                Coordinate.toScreenY(Coordinate.YMAX)
        );
         
        // x ticks
        for (float dx=Coordinate.XMIN; dx <= Coordinate.XMAX; dx += 1.0f) {
            g.drawLine(
                Coordinate.toScreenX(dx),
                Coordinate.toScreenY(-0.25f), 
                Coordinate.toScreenX(dx),
                Coordinate.toScreenY( 0.25f)
            );
        }
        // y ticks
        for (float dy=Coordinate.YMIN; dy <= Coordinate.YMAX; dy += 1.0f) {
            g.drawLine(
                Coordinate.toScreenX(-0.25f),
                Coordinate.toScreenY( dy), 
                Coordinate.toScreenX( 0.25f),
                Coordinate.toScreenY( dy)
            );
        }
    }
 
    private void drawAxisW() {
        Graphics2D g = (Graphics2D) pnlDrawW.getGraphics();
        
        // blackboard
        g.setColor(new Color(24, 62, 12));
        g.fillRect(0, 0, Coordinate.WIDTH, Coordinate.HEIGHT);
        
        // draw x axis (XMIN, 0) (XMAX, 0)
        g.setColor(Color.white);
        g.drawLine(
                Coordinate.toScreenX(Coordinate.XMIN),
                Coordinate.toScreenY(0), 
                Coordinate.toScreenX(Coordinate.XMAX),
                Coordinate.toScreenY(0)
        );
        
        // draw y axis (0, YMIN) (0, YMAX)
         g.drawLine(
                Coordinate.toScreenX(0),
                Coordinate.toScreenY(Coordinate.YMIN), 
                Coordinate.toScreenX(0),
                Coordinate.toScreenY(Coordinate.YMAX)
        );
         
        // x ticks
        for (float dx=Coordinate.XMIN; dx <= Coordinate.XMAX; dx += 1.0f) {
            g.drawLine(
                Coordinate.toScreenX(dx),
                Coordinate.toScreenY(-0.25f), 
                Coordinate.toScreenX(dx),
                Coordinate.toScreenY( 0.25f)
            );
        }
        // y ticks
        for (float dy=Coordinate.YMIN; dy <= Coordinate.YMAX; dy += 1.0f) {
            g.drawLine(
                Coordinate.toScreenX(-0.25f),
                Coordinate.toScreenY( dy), 
                Coordinate.toScreenX( 0.25f),
                Coordinate.toScreenY( dy)
            );
        }
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDraw;
    private javax.swing.JPanel pnlDrawW;
    private javax.swing.JPanel pnlDrawZ;
    // End of variables declaration//GEN-END:variables
}